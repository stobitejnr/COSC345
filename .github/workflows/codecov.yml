name: Codecov Coverage Report

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  codecov:
    runs-on: windows-latest  # Use a Windows runner
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          choco install cmake --no-progress -y  # Install CMake using Chocolatey
          choco install llvm --no-progress -y   # Install LLVM for coverage reporting

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage" ..

      - name: Build
        run: |
          cd build
          cmake --build .

      - name: Run tests
        run: |
          cd build
          ctest -C Debug --output-on-failure

      - name: Verify Coverage Files
        run: |
          cd build
          Get-ChildItem -Recurse -Include *.gcno,*.gcda | Select-Object FullName

      - name: Generate coverage report
        run: |
          cd build
          $gcnoFiles = Get-ChildItem -Recurse -Filter *.gcno | ForEach-Object { $_.FullName }
          $gcdaFiles = Get-ChildItem -Recurse -Filter *.gcda | ForEach-Object { $_.FullName }
          if ($gcnoFiles.Count -eq 0 -or $gcdaFiles.Count -eq 0) {
            Write-Error "No .gcno or .gcda files found."
            exit 1
          }
          foreach ($file in $gcnoFiles) {
            llvm-cov gcov $file > coverage.info
          }
          foreach ($file in $gcdaFiles) {
            llvm-cov gcov $file >> coverage.info
          }

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: build/coverage.info
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
